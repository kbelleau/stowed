#!/usr/bin/env bash
#
# oneshot : run a command (or more) against remote hosts

trap 'echo "SIGINT Received... exiting" && exit 130' SIGINT

err() {
  # handle errors (send to standard error)
  echo "$*" >&2
}

show_help() {
  # help text
  echo "Usage: ${0##*/} [OPTIONS] <hostfile> <command>"
  echo "Options:"
  echo "  -h, --help    Show this help menu"
  echo "  -a            Show output in 'view' format, with line-breaks"
  echo "  -c            Show output in CSV format {hostname},{output}"
  echo "  -u <user>     Specify SSH username"
}

parse_options_prevent_me() {
  # called in parse_options()
  # prevents mutually exclusive options from being requested in the same command
  # uses $mutually_exclusive_options
  if [[ "$mutually_exclusive_options" ]]; then
    err "Conflicting options (-a) and (-c) both used."
    echo "---"
    show_help
    exit 1
  fi
}

parse_options() {
  # check for long "--help"
  if [[ "$1" == "--help" ]]; then
    show_help
    exit 0
  fi

  # set a local variable that prevents mutually exclusive options
  # use with parse_options_prevent_me function
  local mutually_exclusive_options=

  while getopts "hacu:" option; do
    case "${option}" in
      h) show_help; exit 0 ;;
      a)
        parse_options_prevent_me
        format_style="1"
        mutually_exclusive_options="1"
        ;;
      c)
        parse_options_prevent_me
        format_style="2"
        mutually_exclusive_options="1"
        ;;
      u) username="$OPTARG" ;;
      \?)
        err "Invalid option: -$OPTARG"
        show_help
        exit 1
        ;;
    esac
  done
}

### main flow
# parse options and arguments and assign values
format_style="0"
username="${USER}"
parse_options "$@"
shift $((OPTIND - 1))

# check for $1, the hostfile, valid path
if [[ ! -f "$1" ]]; then
  err "$1 not found. Please validate hostlist path"
  exit 3
fi

case "$format_style" in
  0)
    while read -r hostname; do
      ssh -nqo StrictHostKeychecking=no "${username}"@"${hostname}" "${@:2}"
    done < "$1"
    ;;
  1)
    while read -r hostname; do
      echo "${hostname}:"
      ssh -nqo StrictHostKeychecking=no "${username}"@"${hostname}" "${@:2}"
    done < "$1"
    ;;
  2)
    while read -r hostname; do
      echo -n "${hostname},"
      ssh -nqo StrictHostKeychecking=no "${username}"@"${hostname}" "${@:2}"
    done < "$1"
esac
